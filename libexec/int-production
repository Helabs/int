#!/usr/bin/env ruby

def app
  ENV['PRODUCTION_APP']
end

def tasks
  check_git_branch
  run_specs
  maintenance
  backup_database
  deploy
  migrate_and_seed
  tag_and_push
  disable_maintenance
end

def check_git_branch
  current_branch = `git rev-parse --abbrev-ref HEAD`
  if current_branch.strip != "production"
    puts "-----> You can't do a deploy from '#{current_branch}'. Please use 'production' branch.".red
    exit
  end
end

def run_specs
  if ENV['SKIP_TESTS'] != "true"
    abort_if_cmd_fails "int spec"
  end
end

def maintenance
  print "\nPut in maintenance mode? [yN] "
  maintenance = STDIN.gets.chomp.downcase == 'y'
  if maintenance
    abort_if_cmd_fails "heroku maintenance:on --app #{app}"
  end
end

def backup_database
  abort_if_cmd_fails "heroku pgbackups:capture --expire --app #{app}"
end

def tag_and_push
  tag_name = "production-#{Time.now.strftime('%Y-%m-%dT%H%M%S')}"
  abort_if_cmd_fails "git tag #{tag_name}"
  abort_if_cmd_fails "git push origin production --tags"
end 

def deploy
  abort_if_cmd_fails "git push git@heroku.com:#{app}.git master"
end

def migrate_and_seed
  abort_if_cmd_fails "heroku run rake db:migrate db:seed --app #{app}" unless ENV['INT_DISABLE_MIGRATE'] == 'true'
end

def disable_maintenance
  abort_if_cmd_fails "heroku maintenance:off --app #{app}"
end

def abort_if_cmd_fails command, &block
  return if command.nil?
  exec = system command
  unless exec == true
    yield if block_given?
    exit 1
  end
end

tasks
