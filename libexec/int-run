#!/usr/bin/env ruby
# Usage: int run
# Summary: Runs integration. For more info, run 'int help run'
# Help: This is the main command and the one you should use when you want to integrate.
# This will:
#
# * Check if you forgot to commit something in your current project;
# * Lock integration for you;
# * Pull the latest changes from the git repository;
# * Run bundle install;
# * Migrate the database;
# * Run all specs;
# * Push to the git repo.
# * Deploys to Heroku to the app set as APP on .rvmrc.
#
# Currently, there are additional tasks that you can add.
#
# Pre tasks:
# Pre tasks runs before int pulls changes from the remote repo.
# Just add the commands, separated by comma, on your .rvmrc:
# PRE_TASKS=rake project:custom_task,echo "I'm ready!"
#
# Post tasks:
# Post tasks run after the changes have been pushed to Heroku.
# Just add the commands, separated by comma, on your .rvmrc:
# POST_TASKS=rake hipchat:notify,rake dashboard:deploy_payload

def tasks
  [pre_tasks, 'int gitpull', 'int bundle', migrate_task, 'int spec', 'int push', 'int heroku-deploy', post_tasks].flatten
end

def migrate_task
  'int migrate' unless ENV["INT_DISABLE_MIGRATE"] == 'true'
end

def pre_tasks
  if ENV['PRE_TASKS'] != nil
    ENV['PRE_TASKS'].split(',')
  else
    []
  end
end

def post_tasks
  if ENV['POST_TASKS'] != nil
    ENV['POST_TASKS'].split(',')
  else
    []
  end
end

def unlock
  system('int unlock')
end

def lock
  abort_if_cmd_fails 'int lock'
end

def checkgit
  abort_if_cmd_fails 'int checkgit'
end

def run_tasks
  tasks.each do |task|
    abort_if_cmd_fails task do
      # An error has occurred, lets unlock anyway
      unlock
    end
  end
  #We successfully integrated
  unlock
end

def abort_if_cmd_fails command, &block
  return if command.nil?
  exec = system command
  unless exec == true
    yield if block_given?
    exit 1
  end
end

checkgit
lock
run_tasks
puts "Integrated successfully."
exit 0
